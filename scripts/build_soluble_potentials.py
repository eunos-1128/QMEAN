import sys, os, string, tempfile, subprocess, shutil

from qmean import *
from ost import mol, io
from ost.bindings import dssp
from ost.io import repository
from ost import settings
from qmean import conf, pisces
from optparse import OptionParser
import string

parser = OptionParser()

parser.add_option("-p","--pisces_path", action="store", dest="pisces_path", default="cullpdb_pc20_res2.0_R0.25_d130206_chains4216",
                  help="path to pisces file, which contains set of nonredundant structures (http://dunbrack.fccc.edu/PISCES.php) ")
parser.add_option("-o","--out_path",action="store", dest="out_path", default="",
                  help="statistics and potentials will be saved here")
parser.add_option("-r","--repository", action="store", dest="repository_path", default="/import/bc2/data/databases/PDB/data/structures/all/pdb",
                  help="path to directory containing the pdb files")
parser.add_option("-f","--file_pattern", action="store", dest="repository_file_pattern",default='pdb%(id)s.ent.gz',
                  help="pattern, how pdbs are saved in the repository e.g. \'pdb\%(id)s.ent.gz\' if you save them like pdb2dpi.ent.gz")
parser.add_option("-t","--transform", action="store", dest="repository_transform", default='lower',
                  help="what you have to do, that the pisces ids match the id in the above pattern. can be one of [lower,upper]")

(options, args) = parser.parse_args()

#check input arguments
try:
  open(options.pisces_path)
except:
  print "cannot open pisces file!"
  sys.exit(0)

if(os.path.exists(options.repository_path)==False):
  print "repository does not exist"
  sys.exit(0)

if(os.path.exists(options.out_path)==False):
  os.system('mkdir '+options.out_path)

if options.repository_transform=='lower':
  rep_trans=string.lower
elif options.repository_transform=='upper':
  rep_trans=string.upper
else:
  print "transform argument must either be lower or upper!"
  sys.exit(0)


#generating statistics
stats = StatisticContainer()
stats["ss_torsion"] = TorsionStatistic(conf.ss_torsion_group_identifier,conf.ss_torsion_angle_bins)
stats["ss_interaction_alpha"] = InteractionStatistic(conf.ss_interaction_lower_bound, conf.ss_interaction_upper_bound, conf.ss_interaction_bins, conf.ss_interaction_ssep)
stats["ss_interaction_beta"] = InteractionStatistic(conf.ss_interaction_lower_bound, conf.ss_interaction_upper_bound, conf.ss_interaction_bins, conf.ss_interaction_ssep)
stats["ss_interaction_coil"] = InteractionStatistic(conf.ss_interaction_lower_bound, conf.ss_interaction_upper_bound, conf.ss_interaction_bins, conf.ss_interaction_ssep)
stats["ss_cbeta_alpha"] = CBetaStatistic(conf.ss_cbeta_lower_bound, conf.ss_cbeta_upper_bound, conf.ss_cbeta_bins, conf.ss_cbeta_ssep)
stats["ss_cbeta_beta"] = CBetaStatistic(conf.ss_cbeta_lower_bound, conf.ss_cbeta_upper_bound, conf.ss_cbeta_bins, conf.ss_cbeta_ssep)
stats["ss_cbeta_coil"] = CBetaStatistic(conf.ss_cbeta_lower_bound, conf.ss_cbeta_upper_bound, conf.ss_cbeta_bins, conf.ss_cbeta_ssep)
stats["ss_packing_alpha"] = PackingStatistic(conf.ss_packing_cutoff, conf.ss_packing_max_count, conf.ss_packing_bin_size)
stats["ss_packing_beta"] = PackingStatistic(conf.ss_packing_cutoff, conf.ss_packing_max_count, conf.ss_packing_bin_size)
stats["ss_packing_coil"] = PackingStatistic(conf.ss_packing_cutoff, conf.ss_packing_max_count, conf.ss_packing_bin_size)
stats["ss_reduced_alpha"] = ReducedStatistic(conf.ss_reduced_lower_bound, conf.ss_reduced_upper_bound, conf.ss_reduced_angle_bins,conf.ss_reduced_dist_bins, conf.ss_reduced_ssep)
stats["ss_reduced_beta"] = ReducedStatistic(conf.ss_reduced_lower_bound, conf.ss_reduced_upper_bound, conf.ss_reduced_angle_bins,conf.ss_reduced_dist_bins, conf.ss_reduced_ssep)
stats["ss_reduced_coil"] = ReducedStatistic(conf.ss_reduced_lower_bound, conf.ss_reduced_upper_bound, conf.ss_reduced_angle_bins,conf.ss_reduced_dist_bins, conf.ss_reduced_ssep)

#read in non redundant set of structures generated by PISCES (http://dunbrack.fccc.edu/PISCES.php)
#path to this file must be provided in the input

ms = pisces.ModelSet(options.pisces_path)

#the repository class allows access to a structure repository at location given by the input parameter
#note, that the default file_pattern and transform parameter are bc2-specific!


PDB_repo = repository.ModelRepository(options.repository_path, file_pattern=options.repository_file_pattern, transform=rep_trans)

#setting up stuff required for molcking
tmp_dir_name=tempfile.mkdtemp()

executable=settings.Locate('molck') 

molck_cmd=[]
molck_cmd.append(executable)
molck_cmd.append('--fix-ele')
molck_cmd.append('--rm=hyd,oxt,nonstd,unk')
molck_cmd.append('--map-nonstd')
molck_cmd.append('--stdout')
molck_cmd.append(tmp_dir_name)
molck_cmd=' '.join(molck_cmd)
molck_cmd+='/original.pdb'

for pdb_id, chain in ms:
  try:
    ent = PDB_repo.Load(pdb_id).Select('peptide=true')
  except:
    print "could not load ",pdb_id," from given repository"
    continue
  try:
    ost.io.SavePDB(ent,tmp_dir_name+'/original.pdb')

    ps=subprocess.Popen(molck_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = ps.communicate()

    outfile = open(tmp_dir_name+'/molcked.pdb','w')
    outfile.write(stdout)
    outfile.close()

    ent=ost.io.LoadPDB(tmp_dir_name+'/molcked.pdb').Select('peptide=true')

  except:
    print "failed in molck for ",pdb_id
    continue


  if(ent.FindChain(chain).IsValid()==False):
    print "chain ",chain," is not present in ",pdb_id
    continue
  try:
    dssp.AssignDSSP(ent)
  except:
    print "failed in dssp execution for ", pdbid
    continue
  
  print "Extracting stats for ",pdb_id

  alpha_selection = ent.Select("cname="+chain+" and rtype=helix")
  beta_selection  = ent.Select("cname="+chain+" and rtype=ext")
  coil_selection  = ent.Select("cname="+chain+" and rtype=coil")

  stats["ss_torsion"].Extract(ent)
  stats["ss_interaction_alpha"].Extract(alpha_selection,ent)
  stats["ss_interaction_beta"].Extract(beta_selection,ent)
  stats["ss_interaction_coil"].Extract(coil_selection,ent)
  stats["ss_cbeta_alpha"].Extract(alpha_selection,ent)
  stats["ss_cbeta_beta"].Extract(beta_selection,ent)
  stats["ss_cbeta_coil"].Extract(coil_selection,ent)
  stats["ss_packing_alpha"].Extract(alpha_selection,ent)
  stats["ss_packing_beta"].Extract(beta_selection,ent)
  stats["ss_packing_coil"].Extract(coil_selection,ent)
  stats["ss_reduced_alpha"].Extract(alpha_selection,ent)
  stats["ss_reduced_beta"].Extract(beta_selection,ent)
  stats["ss_reduced_coil"].Extract(coil_selection,ent)


stats.Save(options.out_path+"soluble_statistics.dat")

#cleaning up tmp_dir

shutil.rmtree(tmp_dir_name)

print "Calculating potentials from statistics..."

pots=PotentialContainer()

pots["ss_torsion"] = TorsionPotential.Create(stats["ss_torsion"], sigma=conf.ss_torsion_sigma, reference_state=conf.ss_torsion_reference_state)
pots["ss_interaction_alpha"] = InteractionPotential.Create(stats["ss_interaction_alpha"], sigma=conf.ss_interaction_sigma, reference_state=conf.ss_interaction_reference_state)
pots["ss_interaction_beta"] = InteractionPotential.Create(stats["ss_interaction_beta"], sigma=conf.ss_interaction_sigma, reference_state=conf.ss_interaction_reference_state)
pots["ss_interaction_beta"] = InteractionPotential.Create(stats["ss_interaction_coil"], sigma=conf.ss_interaction_sigma, reference_state=conf.ss_interaction_reference_state)
pots["ss_cbeta_alpha"] = CBetaPotential.Create(stats["ss_cbeta_alpha"], sigma=conf.ss_cbeta_sigma, reference_state=conf.ss_cbeta_reference_state)
pots["ss_cbeta_beta"] = CBetaPotential.Create(stats["ss_cbeta_beta"], sigma=conf.ss_cbeta_sigma, reference_state=conf.ss_cbeta_reference_state)
pots["ss_cbeta_coil"] = CBetaPotential.Create(stats["ss_cbeta_coil"], sigma=conf.ss_cbeta_sigma, reference_state=conf.ss_cbeta_reference_state)
pots["ss_packing_alpha"] = PackingPotential.Create(stats["ss_packing_alpha"], sigma=conf.ss_packing_sigma, reference_state=conf.ss_packing_reference_state)
pots["ss_packing_beta"] = PackingPotential.Create(stats["ss_packing_beta"], sigma=conf.ss_packing_sigma, reference_state=conf.ss_packing_reference_state)
pots["ss_packing_coil"] = PackingPotential.Create(stats["ss_packing_coil"], sigma=conf.ss_packing_sigma, reference_state=conf.ss_packing_reference_state)
pots["ss_reduced_alpha"] = ReducedPotential.Create(stats["ss_reduced_alpha"], sigma=conf.ss_reduced_sigma, reference_state=conf.ss_reduced_reference_state)
pots["ss_reduced_beta"] = ReducedPotential.Create(stats["ss_reduced_beta"], sigma=conf.ss_reduced_sigma, reference_state=conf.ss_reduced_reference_state)
pots["ss_reduced_coil"] = ReducedPotential.Create(stats["ss_reduced_coil"], sigma=conf.ss_reduced_sigma, reference_state=conf.ss_reduced_reference_state)

pots.Save(options.out_path+"soluble_potentials.dat")