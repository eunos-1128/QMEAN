.. Copyright (c) 2013-2020, SIB - Swiss Institute of Bioinformatics and
.. Biozentrum - University of Basel
.. 
.. Licensed under the Apache License, Version 2.0 (the "License");
.. you may not use this file except in compliance with the License.
.. You may obtain a copy of the License at
.. 
.. http://www.apache.org/licenses/LICENSE-2.0
.. 
.. Unless required by applicable law or agreed to in writing, software
.. distributed under the License is distributed on an "AS IS" BASIS,
.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.. See the License for the specific language governing permissions and
.. limitations under the License.

GMQE
================================================================================

.. currentmodule:: qmean

The Global Model Quality Estimate (GMQE) aims to predict the expected quality of 
a protein model before it is actually built. It bases the prediction on the 
input data used for a common comparative modelling approach. This can be 
features that are extracted from the target-template sequence alignment 
(e.g. sequence identity etc.) or features derived from structural data 
(e.g. statistical potentials/DisCo applied on a 'raw-model', i.e. a model where 
the coordinates of the template have been transferred to an initial model 
exhibiting the target sequence but without further processing such as loop 
modelling etc.).
The features are combined with a :class:`NNScorer` which is trained to predict
the full-atomic lDDT score of the final model.

To avoid repeating pre-processing steps that are common for all models of a
certain target sequence, GMQE calculation is delegated to a target specific
scorer class:

.. class:: GMQE(seqres, psipred, disco=None, profile=None, crf_file = None)

  Performs all preprocessing required to score any number of models for
  a certain target sequence. 

  :param seqres:      Target sequence
  :param psipred:     PSIPRED prediction that must match *seqres*
  :param disco:       DisCo Container that must match *seqres*. This is 
                      optional but decreases accuracy of quality predictions 
                      if omitted.
  :param profile:     Profile that must match *seqres*. This is optional
                      but decreases accuracy of quality predictions if 
                      omitted. The profile is used to calculate an 
                      HMM-HMM alignment score which aims to reproduce
                      the score which is optimized in alignments
                      generated by HHblits.
  :param crf_file:    When calculating the HMM-HMM alignment score with
                      the *profile*, pseudo counts are assigned.
                      The *crf_file* contains a path to the file containing
                      context profiles in the HH-suite. Given a default 
                      HH-suite installation at <PATH_TO_HHSUITE>, this file
                      can typically be found at: 
                      <PATH_TO_HHSUITE>/data/context_data.crf
                      The pseudo counts are assigned with 
                      :func:`ost.seq.alg.AddAAPseudoCounts`. If *crf_file*
                      is given, pseudo counts are added using the context 
                      profiles. If not, they are added using a substitution 
                      matrix.

  :type seqres:       :class:`str` or :class:`ost.seq.SequenceHandle`
  :type psipred:      :class:`PSIPREDHandler`
  :type disco:        :class:`DisCoContainer`
  :type profile:      :class:`ost.seq.ProfileHandle`
  :type crf_file:     :class:`str`

  .. method:: GetScores(aln, seqres_aln, residue_numbers = None,\
                        n_positions = None, ca_positions = None,\
                        c_positions = None, cb_positions = None,\
                        dssp_states = None, profile_aln_score = None,\
                        tpl_profile = None)

    Calculates all scores it possibly can given the input of this function and
    the input given at initalization of :class:`GMQE`. Alignment specific scores
    are directly extracted from the ATOMSEQ alignment (*aln*: alignment that has
    target sequence as first sequence and template sequence of amino acids that 
    are actually covered by structural data as second sequence) and SEQRES 
    alignment (*seqres_aln*: same as before, but second sequence is the SEQRES,
    i.e. the target sequence of the template which is not necessarily fully 
    covered by structural data). The second sequence in *seqres_aln* must be
    consistent with *tpl_profile*.

    There are two ways to pass structural data for scoring:

    * manually pass the information by providing *residue_numbers*, 
      *n_positions*, *ca_positions*, *c_positions*, *cb_positions* and
      *dssp_states*
    * :class:`ost.mol.EntityView` attached to second sequence (the template 
      sequence) in aln (see: :meth:`ost.seq.AlignmentHandle.AttachView`). 
      To get meaningful results for the ss_agreement score (described below), 
      secondary structure must be assigned (e.g. by executing 
      :meth:`ost.mol.alg.AssignSecStruct`).

    If you pass the stuff manually (option one), any :class:`ost.mol.EntityView`
    attached to *aln* is ignored.      


    Scores that are calculated:

    * seq_id: Fraction of conserved amino acids in *aln*
    * seq_sim: Normalized substitution score in *aln* given BLOSUM62
    * n_insertions: The number of insertions in *aln*
    * n_deletions: The number of deletions in *aln*
    * seqres_length: The length of the target seqres
    * coverage: Fraction of amino acid in target sequence of *aln* that are covered by an amino acid in the template seq
    * seqres_coverage: Fraction of amino acid in target sequence of *seqres_aln* that are covered by an amino acid in the template seq
    * profile_aln_score: Only set if *profile_aln_score* is given or if you provide a target profile at :class:`GMQE` initialization as well as *tpl_profile*. If you provided *profile_aln_score*, that's directly set. Otherwise it executes :meth:`ost.seq.alg.HMMScore` using *seqres_aln*, *tpl_profile* and the target profile given at :class:`GMQE` initialization
    * avg_entropy: Only set if you provide a target profile at :class:`GMQE` initialization. Average entropy of the columns in the target profile
    * dist_const: Only set if you provide a :class:`DisCoContainer` at :class:`GMQE` initialization. Represents the DisCo score calculated on the raw-model
    * reduced: Reduced score on raw-model (see: :class:`ReducedPotential`)
    * cb_packing: CBPacking score on raw-model (see: :class:`CBPackingPotential`)
    * torsion: Torsion score on raw-model (see: :class:`TorsionPotential`)
    * ss_agreement: SSAgreementScore on raw model (see :class:`SSAgreement`)

    :param aln:           The ATOMSEQ alignment with target sequence as first 
                          sequence and the sequence of the template you want to 
                          use for modelling as second sequence. The template 
                          sequence must only contain the amino acid for which we
                          have structural coverage. One way of passing structural
                          data to the function is to attach a 
                          :class:`ost.mol.EntityView` to the template sequence.
    :param seqres_aln:    The SEQRES aligment with target sequence as first 
                          sequence and the sequence of the template you want to
                          use for modelling as second sequence.
    :param residue_numbers: Required if you pass structural data using the 
                            *residue_numbers*, *n_positions*, *ca_positions*,
                            *c_positions*, *cb_positions* and *dssp_states* 
                            parameters. Maps the elements of the passed lists
                            to the target sequence with 1-based indexing scheme
                            (first residue in target sequence has index 1).  
    :param n_positions:     Contains the nitrogen positions of the template 
                            residues which are mapped to the target sequence 
                            using *residue_numbers*.
    :param ca_positions:    Contains the CA carbon positions of the template 
                            residues which are mapped to the target sequence 
                            using *residue_numbers*.
    :param c_positions:     Contains the backbone carbon positions of the template 
                            residues which are mapped to the target sequence 
                            using *residue_numbers*.
    :param cb_positions:    Contains the cb carbon positions of the template
                            residues which are mapped to the target sequence
                            using *residue_numbers*. In case of glycine, 
                            construct a fake CB position using
                            :meth:`ost.mol.alg.CBetaPosition`
    :param dssp_states:     DSSP states of the template residues which are
                            mapped to the target sequence using *residue_numbers*.
                            Valid states: ['H', 'E', 'C', 'G', 'B', 'S', 'T', 'I'].
                            If you assigned the secondary structure to an 
                            :class:`ost.mol.EntityHandle`/:class:`ost.mol.EntityView`,
                            for example with :meth:`ost.mol.alg.AssignSecStruct`, you
                            can extract this state for every 
                            :class:`ost.mol.ResidueHandle`/:class:`ost.mol.ResidueView`
                            r by simply using str(r.GetSecStructure())
    :param profile_aln_score: If set, this value is directly set as profile_aln_score in
                              the return dict without calculating anything.
    :param tpl_profile:     Required to calculate profile_aln_score, must match second
                            sequence in *seqres_aln*.

    :type aln:                :class:`ost.seq.AlignmentHandle`
    :type seqres_aln:         :class:`ost.seq.AlignmentHandle`
    :type residue_numbers:    :class:`list` of :class:`int`
    :type n_positions:        :class:`ost.geom.Vec3List`
    :type ca_positions:       :class:`ost.geom.Vec3List`
    :type c_positions:        :class:`ost.geom.Vec3List`
    :type cb_positions:       :class:`ost.geom.Vec3List`
    :type dssp_states:        :class:`list` of :class:`str`
    :type profile_aln_score:  :class:`float`
    :type tpl_profile:        :class:`ost.seq.ProfileHandle` 

    :returns: A :class:`dict` with all scores it can calculate


  .. method:: PredictGMQE(aln, seqres_aln, residue_numbers = None, n_positions = None, \
                          ca_positions = None, c_positions = None, cb_positions = None, \
                          dssp_states = None, profile_aln_score = None, tpl_profile = None, \
                          QMEANDisCo=None)

    Invokes :meth:`GMQE.GetScores` and returns one final GMQE value using an internal 
    :class:`NNScorer`.

    :param aln:           Passed to :meth:`GMQE.GetScores`
    :param seqres_aln:    Passed to :meth:`GMQE.GetScores`
    :param residue_numbers: Passed to :meth:`GMQE.GetScores`
    :param n_positions:     Passed to :meth:`GMQE.GetScores`
    :param ca_positions:    Passed to :meth:`GMQE.GetScores`
    :param c_positions:     Passed to :meth:`GMQE.GetScores`
    :param cb_positions:    Passed to :meth:`GMQE.GetScores`
    :param dssp_states:     Passed to :meth:`GMQE.GetScores`
    :param profile_aln_score: Passed to :meth:`GMQE.GetScores`
    :param tpl_profile:     Passed to :meth:`GMQE.GetScores`
    :param QMEANDisCo:      If you already built a model, you can further increase the
                            accuracy of the lDDT prediction by passing its global 
                            QMEANDisCo score. Thats the avg_local_score property of
                            the :class:`QMEANScorer` which must be setup with DisCo
                            and all that stuff.

    :type aln:                :class:`ost.seq.AlignmentHandle`
    :type seqres_aln:         :class:`ost.seq.AlignmentHandle`
    :type residue_numbers:    :class:`list` of :class:`int`
    :type n_positions:        :class:`ost.geom.Vec3List`
    :type ca_positions:       :class:`ost.geom.Vec3List`
    :type c_positions:        :class:`ost.geom.Vec3List`
    :type cb_positions:       :class:`ost.geom.Vec3List`
    :type dssp_states:        :class:`list` of :class:`str`
    :type profile_aln_score:  :class:`float`
    :type tpl_profile:        :class:`ost.seq.ProfileHandle` 
    :type QMEANDisCo:         :class:`float`

    

    :returns:                 The predicted lDDT: GMQE




